From 2c63947fda5fd45f0daf49ee1aa9023676ca6894 Mon Sep 17 00:00:00 2001
From: root <root@testpaper.20191124-2>
Date: Thu, 28 Nov 2019 17:50:34 +0000
Subject: [PATCH 2/5] reduce entity path finding period

---
 .../net/minecraft/server/EntityInsentient.java     |   6 +-
 .../minecraft/server/PathfinderGoalSelector.java   | 131 +++++++++++++++++++++
 2 files changed, 135 insertions(+), 2 deletions(-)
 create mode 100644 src/main/java/net/minecraft/server/PathfinderGoalSelector.java

diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d00e99cdb..4e412e30c 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
+import java.util.concurrent.ThreadLocalRandom;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -656,10 +657,11 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bz.a();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("targetSelector");
-        this.targetSelector.doTick();
+        boolean skipGoalUpdate = !(this instanceof EntityPigZombie || this instanceof EntitySnowman || this instanceof EntityCat || this instanceof EntityWolf) && ThreadLocalRandom.current().nextInt(100) < 10 ;
+        this.targetSelector.doTick(skipGoalUpdate);
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("goalSelector");
-        this.goalSelector.doTick();
+        this.goalSelector.doTick(skipGoalUpdate);
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("navigation");
         this.navigation.c();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
new file mode 100644
index 000000000..f076d859d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -0,0 +1,131 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Sets;
+
+import com.google.common.collect.Sets;
+import java.util.EnumMap;
+import java.util.EnumSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Stream;
+
+import net.minecraft.server.PathfinderGoal.Type;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class PathfinderGoalSelector {
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final PathfinderGoalWrapped b = new PathfinderGoalWrapped(2147483647, new PathfinderGoal() {
+        public boolean a() {
+            return false;
+        }
+    }) {
+        public boolean g() {
+            return false;
+        }
+    };
+    private final Map<Type, PathfinderGoalWrapped> c = new EnumMap(Type.class);
+    private final Set<PathfinderGoalWrapped> d = Sets.newLinkedHashSet();
+    private final GameProfilerFiller e;
+    private final EnumSet<Type> f = EnumSet.noneOf(Type.class);
+    private int g = 3;
+
+    public PathfinderGoalSelector(GameProfilerFiller var0) {
+        this.e = var0;
+    }
+
+    public void a(int var0, PathfinderGoal var1) {
+        this.d.add(new PathfinderGoalWrapped(var0, var1));
+    }
+
+    public void a(PathfinderGoal var0) {
+        this.d.stream().filter((var1) -> {
+            return var1.j() == var0;
+        }).filter(PathfinderGoalWrapped::g).forEach(PathfinderGoalWrapped::d);
+        this.d.removeIf((var1) -> {
+            return var1.j() == var0;
+        });
+    }
+
+    public void doTick(){
+        doTick(false);
+    }
+
+    public void doTick(boolean skipGoalUpdate) {
+
+            this.e.enter("goalCleanup");
+            this.c().filter((var0) -> {
+            boolean var2;
+            if (var0.g()) {
+                Stream var10000 = var0.i().stream();
+                EnumSet var10001 = this.f;
+                var10001.getClass();
+                if (!var10000.anyMatch(var10001::contains) && var0.b()) {
+                    var2 = false;
+                    return var2;
+                }
+            }
+
+            var2 = true;
+            return var2;
+        }).forEach(PathfinderGoal::d);
+
+        this.c.forEach((var0, var1) -> {
+            if (!var1.g()) {
+                this.c.remove(var0);
+            }
+
+        });
+        this.e.exit();
+        if(!skipGoalUpdate){
+        this.e.enter("goalUpdate");
+        this.d.stream().filter((var0) -> {
+            return !var0.g();
+        }).filter((var0) -> {
+            Stream var10000 = var0.i().stream();
+            EnumSet var10001 = this.f;
+            var10001.getClass();
+            return var10000.noneMatch(var10001::contains);
+        }).filter((var0) -> {
+            return var0.i().stream().allMatch((var1) -> {
+                return ((PathfinderGoalWrapped)this.c.getOrDefault(var1, b)).a(var0);
+            });
+        }).filter(PathfinderGoalWrapped::a).forEach((var0) -> {
+            var0.i().forEach((var1) -> {
+                PathfinderGoalWrapped var2 = (PathfinderGoalWrapped)this.c.getOrDefault(var1, b);
+                var2.d();
+                this.c.put(var1, var0);
+            });
+            var0.c();
+        });
+        this.e.exit();
+        }
+
+        this.e.enter("goalTick");
+        this.c().forEach(PathfinderGoalWrapped::e);
+        this.e.exit();
+    }
+
+    public Stream<PathfinderGoalWrapped> c() {
+        return this.d.stream().filter(PathfinderGoalWrapped::g);
+    }
+
+    public void a(Type var0) {
+        this.f.add(var0);
+    }
+
+    public void b(Type var0) {
+        this.f.remove(var0);
+    }
+
+    public void a(Type var0, boolean var1) {
+        if (var1) {
+            this.b(var0);
+        } else {
+            this.a(var0);
+        }
+
+    }
+}
-- 
2.11.0

