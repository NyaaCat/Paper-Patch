From bbd80c909630aed651b23a6966ed562010d350c6 Mon Sep 17 00:00:00 2001
From: ReinWD <ReinWDD@gmail.com>
Date: Wed, 1 Jan 2020 17:14:11 +0800
Subject: [PATCH 2/4] reduce EntityInsentient AI

---
 .../net/minecraft/server/EntityInsentient.java     |  6 ++-
 .../minecraft/server/PathfinderGoalSelector.java   | 46 +++++++++++-----------
 2 files changed, 28 insertions(+), 24 deletions(-)

diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 1991cee4..3366b5cb 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
+import java.util.concurrent.ThreadLocalRandom;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -679,11 +680,12 @@ public abstract class EntityInsentient extends EntityLiving {
         this.world.getMethodProfiler().enter("sensing");
         this.bw.a();
         this.world.getMethodProfiler().exit();
+        boolean skipGoalUpdate = !(this instanceof EntityPigZombie || this instanceof EntitySnowman || this instanceof EntityCat || this instanceof EntityWolf) && ThreadLocalRandom.current().nextInt(100) < 90 ;
         this.world.getMethodProfiler().enter("targetSelector");
-        this.targetSelector.doTick();
+        this.targetSelector.doTick(skipGoalUpdate);
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("goalSelector");
-        this.goalSelector.doTick();
+        this.goalSelector.doTick(skipGoalUpdate);
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("navigation");
         this.navigation.c();
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index 93513677..4bfd6130 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -66,7 +66,7 @@ public class PathfinderGoalSelector {
         });
     }
 
-    public void doTick() {
+    public void doTick(boolean skipGoalUpdate) {
         this.e.enter("goalCleanup");
         this.c().filter((pathfindergoalwrapped) -> {
             boolean flag;
@@ -92,29 +92,31 @@ public class PathfinderGoalSelector {
 
         });
         this.e.exit();
-        this.e.enter("goalUpdate");
-        this.d.stream().filter((pathfindergoalwrapped) -> {
-            return !pathfindergoalwrapped.g();
-        }).filter((pathfindergoalwrapped) -> {
-            Stream stream = pathfindergoalwrapped.i().stream();
-            EnumSet enumset = this.f;
-
-            this.f.getClass();
-            return stream.noneMatch(enumset::contains);
-        }).filter((pathfindergoalwrapped) -> {
-            return pathfindergoalwrapped.i().stream().allMatch((pathfindergoal_type) -> {
-                return ((PathfinderGoalWrapped) this.c.getOrDefault(pathfindergoal_type, PathfinderGoalSelector.b)).a(pathfindergoalwrapped);
-            });
-        }).filter(PathfinderGoalWrapped::a).forEach((pathfindergoalwrapped) -> {
-            pathfindergoalwrapped.i().forEach((pathfindergoal_type) -> {
-                PathfinderGoalWrapped pathfindergoalwrapped1 = (PathfinderGoalWrapped) this.c.getOrDefault(pathfindergoal_type, PathfinderGoalSelector.b);
+        if (!skipGoalUpdate) {
+            this.e.enter("goalUpdate");
+            this.d.stream().filter((pathfindergoalwrapped) -> {
+                return !pathfindergoalwrapped.g();
+            }).filter((pathfindergoalwrapped) -> {
+                Stream stream = pathfindergoalwrapped.i().stream();
+                EnumSet enumset = this.f;
 
-                pathfindergoalwrapped1.d();
-                this.c.put(pathfindergoal_type, pathfindergoalwrapped);
+                this.f.getClass();
+                return stream.noneMatch(enumset::contains);
+            }).filter((pathfindergoalwrapped) -> {
+                return pathfindergoalwrapped.i().stream().allMatch((pathfindergoal_type) -> {
+                    return ((PathfinderGoalWrapped) this.c.getOrDefault(pathfindergoal_type, PathfinderGoalSelector.b)).a(pathfindergoalwrapped);
+                });
+            }).filter(PathfinderGoalWrapped::a).forEach((pathfindergoalwrapped) -> {
+                pathfindergoalwrapped.i().forEach((pathfindergoal_type) -> {
+                    PathfinderGoalWrapped pathfindergoalwrapped1 = (PathfinderGoalWrapped) this.c.getOrDefault(pathfindergoal_type, PathfinderGoalSelector.b);
+
+                    pathfindergoalwrapped1.d();
+                    this.c.put(pathfindergoal_type, pathfindergoalwrapped);
+                });
+                pathfindergoalwrapped.c();
             });
-            pathfindergoalwrapped.c();
-        });
-        this.e.exit();
+            this.e.exit();
+        }
         this.e.enter("goalTick");
         this.c().forEach(PathfinderGoalWrapped::e);
         this.e.exit();
-- 
2.11.0

